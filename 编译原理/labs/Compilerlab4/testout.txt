.intel_syntax noprefix
.extern printf
.global factorial
.global main
.data
format_str:
.asciz "%d\n"
.text

factorial:
push ebp
mov ebp, esp
sub esp, 4
mov eax, DWORD PTR [ebp+8]
push eax
mov eax, 1
push eax
pop ebx
pop eax
cmp eax, ebx
setle al
movzx eax, al
push eax
pop eax
cmp eax, 0
je .L_if_end_1
mov eax, 1
push eax
pop eax
leave
ret

jmp .L_if_end_2
.L_if_end_1:
mov eax, DWORD PTR [ebp+8]
push eax
mov eax, DWORD PTR [ebp+8]
push eax
mov eax, 1
push eax
pop ebx
pop eax
sub eax, ebx
push eax
call factorial
add esp, 4
push eax
pop ebx
pop eax
imul ebx
push eax
pop eax
leave
ret

.L_if_end_2:
main:
push ebp
mov ebp, esp
sub esp, 8
mov eax, 1
push eax
pop eax
mov DWORD PTR [ebp-4], eax
.L_while_cond_1:
mov eax, DWORD PTR [ebp-4]
push eax
mov eax, 5
push eax
pop ebx
pop eax
cmp eax, ebx
setle al
movzx eax, al
push eax
pop eax
cmp eax, 0
je .L_while_end_1
mov eax, DWORD PTR [ebp-4]
push eax
call factorial
add esp, 4
push eax
push offset format_str
call printf
add esp, 8
mov eax, DWORD PTR [ebp-4]
push eax
mov eax, 1
push eax
pop ebx
pop eax
add eax, ebx
push eax
pop eax
mov DWORD PTR [ebp-4], eax
jmp .L_while_cond_1
.L_while_end_1:
mov eax, 0
push eax
pop eax
leave
ret
