.intel_syntax noprefix
.extern printf
.global print4
.global main
.data
format_str:
.asciz "%d\n"
.text


print4:
push ebp
mov ebp, esp
sub esp, 4
mov eax, DWORD PTR [ebp + 20]
push eax
push offset format_str
call printf
add esp, 8
mov eax, DWORD PTR [ebp + 16]
push eax
push offset format_str
call printf
add esp, 8
mov eax, DWORD PTR [ebp + 12]
push eax
push offset format_str
call printf
add esp, 8
mov eax, DWORD PTR [ebp + 8]
push eax
push offset format_str
call printf
add esp, 8
leave
ret

main:
push ebp
mov ebp, esp
sub esp, 96
push 114
pop eax
mov DWORD PTR [ebp - 4], eax
push 514
pop eax
mov DWORD PTR [ebp - 8], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 8]
push eax
pop ebx
pop eax
cmp eax, ebx
sete al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 12], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 4]
push eax
pop ebx
pop eax
cmp eax, ebx
sete al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 16], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 8]
push eax
pop ebx
pop eax
cmp eax, ebx
setne al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 20], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 4]
push eax
pop ebx
pop eax
cmp eax, ebx
setne al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 24], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 8]
push eax
pop ebx
pop eax
cmp eax, ebx
setl al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 28], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 4]
push eax
pop ebx
pop eax
cmp eax, ebx
setl al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 32], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 8]
push eax
pop ebx
pop eax
cmp eax, ebx
setle al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 36], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 4]
push eax
pop ebx
pop eax
cmp eax, ebx
setle al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 40], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 8]
push eax
pop ebx
pop eax
cmp eax, ebx
setg al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 44], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 4]
push eax
pop ebx
pop eax
cmp eax, ebx
setg al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 48], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 8]
push eax
pop ebx
pop eax
cmp eax, ebx
setge al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 52], eax
mov eax, DWORD PTR [ebp - 4]
push eax
mov eax, DWORD PTR [ebp - 4]
push eax
pop ebx
pop eax
cmp eax, ebx
setge al
movzx eax, al
push eax
pop eax
mov DWORD PTR [ebp - 56], eax
mov eax, DWORD PTR [ebp - 12]
push eax
mov eax, DWORD PTR [ebp - 16]
push eax
mov eax, DWORD PTR [ebp - 20]
push eax
mov eax, DWORD PTR [ebp - 24]
push eax
call print4
add esp, 16
push eax
mov eax, DWORD PTR [ebp - 28]
push eax
mov eax, DWORD PTR [ebp - 32]
push eax
mov eax, DWORD PTR [ebp - 36]
push eax
mov eax, DWORD PTR [ebp - 40]
push eax
call print4
add esp, 16
push eax
mov eax, DWORD PTR [ebp - 44]
push eax
mov eax, DWORD PTR [ebp - 48]
push eax
mov eax, DWORD PTR [ebp - 52]
push eax
mov eax, DWORD PTR [ebp - 56]
push eax
call print4
add esp, 16
push eax
push 0
push 1
pop ebx
pop eax
test eax, eax
jz zero0
test ebx, ebx
jz zero0
push 1
jmp logicalAndEnd0
zero0:
push 0
logicalAndEnd0:
pop eax
mov DWORD PTR [ebp - 60], eax
push 1
push 0
pop ebx
pop eax
test eax, eax
jz zero1
test ebx, ebx
jz zero1
push 1
jmp logicalAndEnd1
zero1:
push 0
logicalAndEnd1:
pop eax
mov DWORD PTR [ebp - 64], eax
push 0
push 1
pop ebx
pop eax
test eax, eax
jz zero2
test ebx, ebx
jz zero2
push 1
jmp logicalAndEnd2
zero2:
push 0
logicalAndEnd2:
pop eax
mov DWORD PTR [ebp - 68], eax
push 0
push 0
pop ebx
pop eax
test eax, eax
jz zero3
test ebx, ebx
jz zero3
push 1
jmp logicalAndEnd3
zero3:
push 0
logicalAndEnd3:
pop eax
mov DWORD PTR [ebp - 72], eax
push 0
push 1
pop ebx
pop eax
test eax, eax
jnz one0
test ebx, ebx
jnz one0
push 0
jmp logicalOrEnd0
one0:
push 1
logicalOrEnd0:
pop eax
mov DWORD PTR [ebp - 76], eax
push 1
push 0
pop ebx
pop eax
test eax, eax
jnz one1
test ebx, ebx
jnz one1
push 0
jmp logicalOrEnd1
one1:
push 1
logicalOrEnd1:
pop eax
mov DWORD PTR [ebp - 80], eax
push 0
push 1
pop ebx
pop eax
test eax, eax
jnz one2
test ebx, ebx
jnz one2
push 0
jmp logicalOrEnd2
one2:
push 1
logicalOrEnd2:
pop eax
mov DWORD PTR [ebp - 84], eax
push 0
push 0
pop ebx
pop eax
test eax, eax
jnz one3
test ebx, ebx
jnz one3
push 0
jmp logicalOrEnd3
one3:
push 1
logicalOrEnd3:
pop eax
mov DWORD PTR [ebp - 88], eax
push 1
pop eax
test eax, eax
setz al
push eax
pop eax
mov DWORD PTR [ebp - 92], eax
push 0
pop eax
test eax, eax
setz al
push eax
pop eax
mov DWORD PTR [ebp - 96], eax
mov eax, DWORD PTR [ebp - 60]
push eax
mov eax, DWORD PTR [ebp - 64]
push eax
mov eax, DWORD PTR [ebp - 68]
push eax
mov eax, DWORD PTR [ebp - 72]
push eax
call print4
add esp, 16
push eax
mov eax, DWORD PTR [ebp - 76]
push eax
mov eax, DWORD PTR [ebp - 80]
push eax
mov eax, DWORD PTR [ebp - 84]
push eax
mov eax, DWORD PTR [ebp - 88]
push eax
call print4
add esp, 16
push eax
mov eax, DWORD PTR [ebp - 92]
push eax
mov eax, DWORD PTR [ebp - 96]
push eax
push 0
push 0
call print4
add esp, 16
push eax
push 0
pop eax
pop eax
leave
ret